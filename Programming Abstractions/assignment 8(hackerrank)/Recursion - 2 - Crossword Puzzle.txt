#include <bits/stdc++.h>

using namespace std;
enum direction{DOWN, RIGHT};
 
struct Word {
    int x;
    int y;
    int length;
    direction d;
};
 
void getInfoHorizontal(vector<string> &crossword, vector<Word> &wordLocs){
    Word word;
    for(int i = 0 ; i < crossword.size(); i++){
        for(int j = 0 ; j < crossword[0].size(); j++){
            int tmpJ = j;
            while(tmpJ < crossword.size() && crossword[i][tmpJ] == '-') tmpJ++;
            if(tmpJ - j > 1){
                word.x = i;
                word.y = j;
                word.length = tmpJ - j;
                word.d = RIGHT;
                wordLocs.push_back(word);
                j = tmpJ;
            }
        }
    }
}
 
void getInfoVertical(vector<string> &crossword, vector<Word> &wordLocs){
    Word word;
    for(int i = 0 ; i < crossword.size(); i++){
        for(int j = 0 ; j < crossword[0].size(); j++){
            int tmpI = j;
            while(tmpI < crossword.size() && crossword[tmpI][i] == '-') tmpI++;
            if(tmpI - j > 1){
                word.x = j;
                word.y = i;
                word.length = tmpI - j;
                word.d = DOWN;
                wordLocs.push_back(word);
                j = tmpI;
            }
        }
    }
}

void putWords(vector<Word> &locs, 
vector<string> & words, 
vector<string>  crossword, 
vector<string> & res,
bool &b){
    for(int i = 0; i < words.size(); i++) if(words[i].size() != locs[i].length) return;

    for(int i = 0; i < locs.size(); i++){
        string word = words[i];
        int x = locs[i].x;
        int y = locs[i].y;
        for(int j = 0; j < word.size(); j++){
            if(crossword[x][y] != '-' && crossword[x][y] != word[j]) return;
            crossword[x][y] = word[j];
           (locs[i].d == RIGHT) ? y++ : x++;
        }
    }

    b = true;
    res = crossword;
}

void makePermutations(vector<Word> locs, 
vector<string> & words, 
vector<string> & crossword, 
vector<string> & res,
int f,
int l,
bool &b){
    if(b) return;
    if(f == l){
        putWords(locs, words, crossword, res, b);
    }else{
        for(int i = f; i <= l; i++){
            swap(locs[i], locs[f]);
            makePermutations(locs, words, crossword, res, f + 1, l, b);
            swap(locs[i], locs[f]);
        }
    }
}

void tryAll(vector<Word> & locs, 
vector<string> & words, 
vector<string> & crossword, 
vector<string> & res){
    bool b = false;
    makePermutations(locs, words, crossword, res, 0, words.size() - 1, b);
}
 
// Complete the crosswordPuzzle function below.
vector<string> crosswordPuzzle(vector<string> crossword, vector<string> words) {
    vector<Word> locs;
    getInfoVertical(crossword, locs);
    getInfoHorizontal(crossword, locs);

    vector<string> res;
    tryAll(locs, words, crossword, res);

    return res;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    vector<string> crossword(10);

    for (int i = 0; i < 10; i++) {
        string crossword_item;
        getline(cin, crossword_item);

        crossword[i] = crossword_item;
    }

    string words;
    getline(cin, words);

    vector<string> wrds;

    for(int i = 0; i < words.size(); i++){
        int j = i;
        while(words[j] != ';'){
            if(j == words.size()) break;
            j++;
        }
        wrds.push_back(words.substr(i, j - i));
        i = j;
    }

    vector<string> result = crosswordPuzzle(crossword, wrds);

    for (int i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}
