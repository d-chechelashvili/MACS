 #include <bits/stdc++.h>

using namespace std;

struct pairT{
    int first;
    int second;
    int count;
};

void push(queue<pairT> &q, pairT &p, int n, vector<vector<bool>> &been){
    if (p.first < 0 || p.second < 0 || p.first >= n || p.second >= n || been[p.first][p.second]) return;
    been[p.first][p.second] = true;
    q.push(p);
}

    // Complete the knightlOnAChessboard function below.
int countMoves(int a, int b, int n) {
  queue<pairT> q;
  vector<vector<bool>> been;
  been.resize(n);
  for (int i = 0; i < n; i++) been[i].resize(n);
  pairT p1;
  pairT p2;
  p1.first = 0;
  p1.second = 0;
  p1.count = 0;
  q.push(p1);
  while (q.size() > 0) {
    p1 = q.front();
    p2 = p1;
    q.pop();
    if (p1.first == n -1 && p1.second == n - 1) return p1.count;
    for (int i = -1; i < 2; i += 2) {
      for (int j = -1; j < 2; j += 2) {
        p2.first = p1.first - i * a;
        p2.second = p1.second - j * b;
        p2.count = p1.count + 1;
        push(q, p2, n, been);
        p2.first = p1.first - i * b;
        p2.second = p1.second - j * a;
        p2.count = p1.count + 1;
        push(q, p2, n, been);
      }
    }
  }
  return -1;
}

// Complete the knightlOnAChessboard function below.
vector<vector<int>> knightlOnAChessboard(int n) {
  vector<vector<int>> ans(n-1);
  for (int i = 0; i < n-1; i++) ans[i].resize(n-1); 
  for (int i = 1; i < n; i++) {
    for (int j = i; j < n; j++) {
      ans[i - 1][j - 1] = countMoves(i, j, n);
      ans[j - 1][i - 1] = ans[i - 1][j - 1];
    }
  }
  return ans;
}

  int main() {
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<vector<int>> result = knightlOnAChessboard(n);

    for (int i = 0; i < result.size(); i++) {
        for (int j = 0; j < result[i].size(); j++) {
            fout << result[i][j];

            if (j != result[i].size() - 1) {
                fout << " ";
            }
        }

        if (i != result.size() - 1) {
          fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}
